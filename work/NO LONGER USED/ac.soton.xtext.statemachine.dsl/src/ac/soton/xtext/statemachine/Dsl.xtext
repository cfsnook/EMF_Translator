// automatically generated by Xtext
grammar ac.soton.xtext.statemachine.Dsl with org.eclipse.xtext.common.Terminals

import "http://statemachinesXText.soton.ac" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

StateMachine returns StateMachine:
	{StateMachine}
	'StateMachine'
	name=EString
	/*'{'*/
		('Nodes' /*'{'*/ Nodes+=AbstractNode ( "," Nodes+=AbstractNode)* /*'}'*/ )?
		('Transitions' /*'{'*/ Transitions+=Transition ( "," Transitions+=Transition)* /*'}'*/ )?
		('StateMachines' /*'{'*/ StateMachines+=StateMachine ( "," StateMachines+=StateMachine)* /*'}'*/ )?
	/*'}'*/
	'End StateMachine';

AbstractNode returns AbstractNode:
	State | Initial | Junction | Fork | Join | Any | Final;


EString returns ecore::EString:
	STRING | ID;

Transition returns Transition:
	{Transition}
	'Transition'
	/*'{'*/
		('event' event=EString)?
		('source' source=[AbstractNode|EString])?
		('target' target=[AbstractNode|EString])?
	/*'}'*/;

State returns State:
	{State}
	'State'
	name=EString
	/*'{'*/
		('nested' nested=StateMachine)?
	/*'{'*/;

Initial returns Initial:
	{Initial}
	'Initial'
	name=EString;

Junction returns Junction:
	{Junction}
	'Junction'
	name=EString;

Fork returns Fork:
	{Fork}
	'Fork'
	name=EString;

Join returns Join:
	{Join}
	'Join'
	name=EString;

Any returns Any:
	{Any}
	'Any'
	name=EString;

Final returns Final:
	{Final}
	'Final'
	name=EString;
