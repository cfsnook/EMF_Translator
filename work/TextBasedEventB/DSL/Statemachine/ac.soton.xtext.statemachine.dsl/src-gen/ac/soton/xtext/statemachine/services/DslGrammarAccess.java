/*
* generated by Xtext
*/
package ac.soton.xtext.statemachine.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateMachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateMachineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNodesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNodesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNodesAbstractNodeParserRuleCall_3_1_0 = (RuleCall)cNodesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cNodesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cNodesAbstractNodeParserRuleCall_3_2_1_0 = (RuleCall)cNodesAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTransitionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTransitionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_1_0 = (RuleCall)cTransitionsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cTransitionsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_2_1_0 = (RuleCall)cTransitionsAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cStateMachinesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStateMachinesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStateMachinesStateMachineParserRuleCall_5_1_0 = (RuleCall)cStateMachinesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cStateMachinesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cStateMachinesStateMachineParserRuleCall_5_2_1_0 = (RuleCall)cStateMachinesAssignment_5_2_1.eContents().get(0);
		private final Keyword cEndStateMachineKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//StateMachine:
		//	{StateMachine} "StateMachine" name=EString / *'{'* / ("Nodes" / *'{'* / Nodes+=AbstractNode ("," Nodes+=AbstractNode)*)?
		//	/ *'}'* / ("Transitions" / *'{'* / Transitions+=Transition ("," Transitions+=Transition)*)? / *'}'* / ("StateMachines"
		//	/ *'{'* / StateMachines+=StateMachine ("," StateMachines+=StateMachine)*)? / *'}'* / / *'}'* / "End StateMachine";
		public ParserRule getRule() { return rule; }

		//{StateMachine} "StateMachine" name=EString / *'{'* / ("Nodes" / *'{'* / Nodes+=AbstractNode ("," Nodes+=AbstractNode)*)?
		/// *'}'* / ("Transitions" / *'{'* / Transitions+=Transition ("," Transitions+=Transition)*)? / *'}'* / ("StateMachines"
		/// *'{'* / StateMachines+=StateMachine ("," StateMachines+=StateMachine)*)? / *'}'* / / *'}'* / "End StateMachine"
		public Group getGroup() { return cGroup; }

		//{StateMachine}
		public Action getStateMachineAction_0() { return cStateMachineAction_0; }

		//"StateMachine"
		public Keyword getStateMachineKeyword_1() { return cStateMachineKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//("Nodes" / *'{'* / Nodes+=AbstractNode ("," Nodes+=AbstractNode)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"Nodes"
		public Keyword getNodesKeyword_3_0() { return cNodesKeyword_3_0; }

		/// *'{'* / Nodes+=AbstractNode
		public Assignment getNodesAssignment_3_1() { return cNodesAssignment_3_1; }

		//AbstractNode
		public RuleCall getNodesAbstractNodeParserRuleCall_3_1_0() { return cNodesAbstractNodeParserRuleCall_3_1_0; }

		//("," Nodes+=AbstractNode)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//Nodes+=AbstractNode
		public Assignment getNodesAssignment_3_2_1() { return cNodesAssignment_3_2_1; }

		//AbstractNode
		public RuleCall getNodesAbstractNodeParserRuleCall_3_2_1_0() { return cNodesAbstractNodeParserRuleCall_3_2_1_0; }

		//("Transitions" / *'{'* / Transitions+=Transition ("," Transitions+=Transition)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"Transitions"
		public Keyword getTransitionsKeyword_4_0() { return cTransitionsKeyword_4_0; }

		/// *'{'* / Transitions+=Transition
		public Assignment getTransitionsAssignment_4_1() { return cTransitionsAssignment_4_1; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_1_0() { return cTransitionsTransitionParserRuleCall_4_1_0; }

		//("," Transitions+=Transition)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//Transitions+=Transition
		public Assignment getTransitionsAssignment_4_2_1() { return cTransitionsAssignment_4_2_1; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_2_1_0() { return cTransitionsTransitionParserRuleCall_4_2_1_0; }

		//("StateMachines" / *'{'* / StateMachines+=StateMachine ("," StateMachines+=StateMachine)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"StateMachines"
		public Keyword getStateMachinesKeyword_5_0() { return cStateMachinesKeyword_5_0; }

		/// *'{'* / StateMachines+=StateMachine
		public Assignment getStateMachinesAssignment_5_1() { return cStateMachinesAssignment_5_1; }

		//StateMachine
		public RuleCall getStateMachinesStateMachineParserRuleCall_5_1_0() { return cStateMachinesStateMachineParserRuleCall_5_1_0; }

		//("," StateMachines+=StateMachine)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//StateMachines+=StateMachine
		public Assignment getStateMachinesAssignment_5_2_1() { return cStateMachinesAssignment_5_2_1; }

		//StateMachine
		public RuleCall getStateMachinesStateMachineParserRuleCall_5_2_1_0() { return cStateMachinesStateMachineParserRuleCall_5_2_1_0; }

		/// *'}'* / "End StateMachine"
		public Keyword getEndStateMachineKeyword_6() { return cEndStateMachineKeyword_6; }
	}

	public class AbstractNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitialParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJoinParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAnyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFinalParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//AbstractNode:
		//	State | Initial | Junction | Fork | Join | Any | Final;
		public ParserRule getRule() { return rule; }

		//State | Initial | Junction | Fork | Join | Any | Final
		public Alternatives getAlternatives() { return cAlternatives; }

		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }

		//Initial
		public RuleCall getInitialParserRuleCall_1() { return cInitialParserRuleCall_1; }

		//Junction
		public RuleCall getJunctionParserRuleCall_2() { return cJunctionParserRuleCall_2; }

		//Fork
		public RuleCall getForkParserRuleCall_3() { return cForkParserRuleCall_3; }

		//Join
		public RuleCall getJoinParserRuleCall_4() { return cJoinParserRuleCall_4; }

		//Any
		public RuleCall getAnyParserRuleCall_5() { return cAnyParserRuleCall_5; }

		//Final
		public RuleCall getFinalParserRuleCall_6() { return cFinalParserRuleCall_6; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTransitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEventKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEventAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEventEStringParserRuleCall_2_1_0 = (RuleCall)cEventAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSourceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSourceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSourceAbstractNodeCrossReference_3_1_0 = (CrossReference)cSourceAssignment_3_1.eContents().get(0);
		private final RuleCall cSourceAbstractNodeEStringParserRuleCall_3_1_0_1 = (RuleCall)cSourceAbstractNodeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTargetKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTargetAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cTargetAbstractNodeCrossReference_4_1_0 = (CrossReference)cTargetAssignment_4_1.eContents().get(0);
		private final RuleCall cTargetAbstractNodeEStringParserRuleCall_4_1_0_1 = (RuleCall)cTargetAbstractNodeCrossReference_4_1_0.eContents().get(1);
		
		/// *'}'* / Transition:
		//	{Transition} "Transition" / *'{'* / ("event" event=EString)? ("source" source=[AbstractNode|EString])? ("target"
		//	target=[AbstractNode|EString])?;
		public ParserRule getRule() { return rule; }

		//{Transition} "Transition" / *'{'* / ("event" event=EString)? ("source" source=[AbstractNode|EString])? ("target"
		//target=[AbstractNode|EString])?
		public Group getGroup() { return cGroup; }

		//{Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }

		//"Transition"
		public Keyword getTransitionKeyword_1() { return cTransitionKeyword_1; }

		//("event" event=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//"event"
		public Keyword getEventKeyword_2_0() { return cEventKeyword_2_0; }

		//event=EString
		public Assignment getEventAssignment_2_1() { return cEventAssignment_2_1; }

		//EString
		public RuleCall getEventEStringParserRuleCall_2_1_0() { return cEventEStringParserRuleCall_2_1_0; }

		//("source" source=[AbstractNode|EString])?
		public Group getGroup_3() { return cGroup_3; }

		//"source"
		public Keyword getSourceKeyword_3_0() { return cSourceKeyword_3_0; }

		//source=[AbstractNode|EString]
		public Assignment getSourceAssignment_3_1() { return cSourceAssignment_3_1; }

		//[AbstractNode|EString]
		public CrossReference getSourceAbstractNodeCrossReference_3_1_0() { return cSourceAbstractNodeCrossReference_3_1_0; }

		//EString
		public RuleCall getSourceAbstractNodeEStringParserRuleCall_3_1_0_1() { return cSourceAbstractNodeEStringParserRuleCall_3_1_0_1; }

		//("target" target=[AbstractNode|EString])?
		public Group getGroup_4() { return cGroup_4; }

		//"target"
		public Keyword getTargetKeyword_4_0() { return cTargetKeyword_4_0; }

		//target=[AbstractNode|EString]
		public Assignment getTargetAssignment_4_1() { return cTargetAssignment_4_1; }

		//[AbstractNode|EString]
		public CrossReference getTargetAbstractNodeCrossReference_4_1_0() { return cTargetAbstractNodeCrossReference_4_1_0; }

		//EString
		public RuleCall getTargetAbstractNodeEStringParserRuleCall_4_1_0_1() { return cTargetAbstractNodeEStringParserRuleCall_4_1_0_1; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNestedKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNestedAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNestedStateMachineParserRuleCall_3_1_0 = (RuleCall)cNestedAssignment_3_1.eContents().get(0);
		
		/// *'{'* / State:
		//	{State} "State" name=EString / *'{'* / ("nested" nested=StateMachine)?;
		public ParserRule getRule() { return rule; }

		//{State} "State" name=EString / *'{'* / ("nested" nested=StateMachine)?
		public Group getGroup() { return cGroup; }

		//{State}
		public Action getStateAction_0() { return cStateAction_0; }

		//"State"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//("nested" nested=StateMachine)?
		public Group getGroup_3() { return cGroup_3; }

		//"nested"
		public Keyword getNestedKeyword_3_0() { return cNestedKeyword_3_0; }

		//nested=StateMachine
		public Assignment getNestedAssignment_3_1() { return cNestedAssignment_3_1; }

		//StateMachine
		public RuleCall getNestedStateMachineParserRuleCall_3_1_0() { return cNestedStateMachineParserRuleCall_3_1_0; }
	}

	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Initial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitialAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInitialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Initial:
		//	{Initial} "Initial" name=EString;
		public ParserRule getRule() { return rule; }

		//{Initial} "Initial" name=EString
		public Group getGroup() { return cGroup; }

		//{Initial}
		public Action getInitialAction_0() { return cInitialAction_0; }

		//"Initial"
		public Keyword getInitialKeyword_1() { return cInitialKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class JunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Junction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Junction:
		//	{Junction} "Junction" name=EString;
		public ParserRule getRule() { return rule; }

		//{Junction} "Junction" name=EString
		public Group getGroup() { return cGroup; }

		//{Junction}
		public Action getJunctionAction_0() { return cJunctionAction_0; }

		//"Junction"
		public Keyword getJunctionKeyword_1() { return cJunctionKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class ForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Fork:
		//	{Fork} "Fork" name=EString;
		public ParserRule getRule() { return rule; }

		//{Fork} "Fork" name=EString
		public Group getGroup() { return cGroup; }

		//{Fork}
		public Action getForkAction_0() { return cForkAction_0; }

		//"Fork"
		public Keyword getForkKeyword_1() { return cForkKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJoinAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJoinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Join:
		//	{Join} "Join" name=EString;
		public ParserRule getRule() { return rule; }

		//{Join} "Join" name=EString
		public Group getGroup() { return cGroup; }

		//{Join}
		public Action getJoinAction_0() { return cJoinAction_0; }

		//"Join"
		public Keyword getJoinKeyword_1() { return cJoinKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class AnyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Any");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAnyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Any:
		//	{Any} "Any" name=EString;
		public ParserRule getRule() { return rule; }

		//{Any} "Any" name=EString
		public Group getGroup() { return cGroup; }

		//{Any}
		public Action getAnyAction_0() { return cAnyAction_0; }

		//"Any"
		public Keyword getAnyKeyword_1() { return cAnyKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class FinalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Final");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFinalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFinalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Final:
		//	{Final} "Final" name=EString;
		public ParserRule getRule() { return rule; }

		//{Final} "Final" name=EString
		public Group getGroup() { return cGroup; }

		//{Final}
		public Action getFinalAction_0() { return cFinalAction_0; }

		//"Final"
		public Keyword getFinalKeyword_1() { return cFinalKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	
	
	private StateMachineElements pStateMachine;
	private AbstractNodeElements pAbstractNode;
	private EStringElements pEString;
	private TransitionElements pTransition;
	private StateElements pState;
	private InitialElements pInitial;
	private JunctionElements pJunction;
	private ForkElements pFork;
	private JoinElements pJoin;
	private AnyElements pAny;
	private FinalElements pFinal;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.xtext.statemachine.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StateMachine:
	//	{StateMachine} "StateMachine" name=EString / *'{'* / ("Nodes" / *'{'* / Nodes+=AbstractNode ("," Nodes+=AbstractNode)*)?
	//	/ *'}'* / ("Transitions" / *'{'* / Transitions+=Transition ("," Transitions+=Transition)*)? / *'}'* / ("StateMachines"
	//	/ *'{'* / StateMachines+=StateMachine ("," StateMachines+=StateMachine)*)? / *'}'* / / *'}'* / "End StateMachine";
	public StateMachineElements getStateMachineAccess() {
		return (pStateMachine != null) ? pStateMachine : (pStateMachine = new StateMachineElements());
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}

	//AbstractNode:
	//	State | Initial | Junction | Fork | Join | Any | Final;
	public AbstractNodeElements getAbstractNodeAccess() {
		return (pAbstractNode != null) ? pAbstractNode : (pAbstractNode = new AbstractNodeElements());
	}
	
	public ParserRule getAbstractNodeRule() {
		return getAbstractNodeAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	/// *'}'* / Transition:
	//	{Transition} "Transition" / *'{'* / ("event" event=EString)? ("source" source=[AbstractNode|EString])? ("target"
	//	target=[AbstractNode|EString])?;
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	/// *'{'* / State:
	//	{State} "State" name=EString / *'{'* / ("nested" nested=StateMachine)?;
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Initial:
	//	{Initial} "Initial" name=EString;
	public InitialElements getInitialAccess() {
		return (pInitial != null) ? pInitial : (pInitial = new InitialElements());
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}

	//Junction:
	//	{Junction} "Junction" name=EString;
	public JunctionElements getJunctionAccess() {
		return (pJunction != null) ? pJunction : (pJunction = new JunctionElements());
	}
	
	public ParserRule getJunctionRule() {
		return getJunctionAccess().getRule();
	}

	//Fork:
	//	{Fork} "Fork" name=EString;
	public ForkElements getForkAccess() {
		return (pFork != null) ? pFork : (pFork = new ForkElements());
	}
	
	public ParserRule getForkRule() {
		return getForkAccess().getRule();
	}

	//Join:
	//	{Join} "Join" name=EString;
	public JoinElements getJoinAccess() {
		return (pJoin != null) ? pJoin : (pJoin = new JoinElements());
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}

	//Any:
	//	{Any} "Any" name=EString;
	public AnyElements getAnyAccess() {
		return (pAny != null) ? pAny : (pAny = new AnyElements());
	}
	
	public ParserRule getAnyRule() {
		return getAnyAccess().getRule();
	}

	//Final:
	//	{Final} "Final" name=EString;
	public FinalElements getFinalAccess() {
		return (pFinal != null) ? pFinal : (pFinal = new FinalElements());
	}
	
	public ParserRule getFinalRule() {
		return getFinalAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
