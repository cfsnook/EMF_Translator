/*
* generated by Xtext
*/
package ac.soton.uk.iumlb.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import ac.soton.uk.iumlb.xtext.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {
	
	@Inject
	private DslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected ac.soton.uk.iumlb.xtext.ui.contentassist.antlr.internal.InternalDslParser createParser() {
		ac.soton.uk.iumlb.xtext.ui.contentassist.antlr.internal.InternalDslParser result = new ac.soton.uk.iumlb.xtext.ui.contentassist.antlr.internal.InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractNodeAccess().getAlternatives(), "rule__AbstractNode__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getStatemachineAccess().getGroup(), "rule__Statemachine__Group__0");
					put(grammarAccess.getStatemachineAccess().getGroup_2(), "rule__Statemachine__Group_2__0");
					put(grammarAccess.getStatemachineAccess().getGroup_3(), "rule__Statemachine__Group_3__0");
					put(grammarAccess.getStatemachineAccess().getGroup_4(), "rule__Statemachine__Group_4__0");
					put(grammarAccess.getStatemachineAccess().getGroup_4_2(), "rule__Statemachine__Group_4_2__0");
					put(grammarAccess.getStatemachineAccess().getGroup_5(), "rule__Statemachine__Group_5__0");
					put(grammarAccess.getStatemachineAccess().getGroup_5_2(), "rule__Statemachine__Group_5_2__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_3(), "rule__Transition__Group_3__0");
					put(grammarAccess.getTransitionAccess().getGroup_4(), "rule__Transition__Group_4__0");
					put(grammarAccess.getTransitionAccess().getGroup_4_2(), "rule__Transition__Group_4_2__0");
					put(grammarAccess.getTransitionAccess().getGroup_5(), "rule__Transition__Group_5__0");
					put(grammarAccess.getTransitionAccess().getGroup_6(), "rule__Transition__Group_6__0");
					put(grammarAccess.getEObjectAccess().getGroup(), "rule__EObject__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getStateAccess().getGroup_3(), "rule__State__Group_3__0");
					put(grammarAccess.getStateAccess().getGroup_3_3(), "rule__State__Group_3_3__0");
					put(grammarAccess.getStateAccess().getGroup_4(), "rule__State__Group_4__0");
					put(grammarAccess.getStateAccess().getGroup_4_3(), "rule__State__Group_4_3__0");
					put(grammarAccess.getInitialAccess().getGroup(), "rule__Initial__Group__0");
					put(grammarAccess.getInitialAccess().getGroup_2(), "rule__Initial__Group_2__0");
					put(grammarAccess.getFinalAccess().getGroup(), "rule__Final__Group__0");
					put(grammarAccess.getFinalAccess().getGroup_2(), "rule__Final__Group_2__0");
					put(grammarAccess.getAnyAccess().getGroup(), "rule__Any__Group__0");
					put(grammarAccess.getAnyAccess().getGroup_2(), "rule__Any__Group_2__0");
					put(grammarAccess.getJunctionAccess().getGroup(), "rule__Junction__Group__0");
					put(grammarAccess.getJunctionAccess().getGroup_2(), "rule__Junction__Group_2__0");
					put(grammarAccess.getForkAccess().getGroup(), "rule__Fork__Group__0");
					put(grammarAccess.getForkAccess().getGroup_2(), "rule__Fork__Group_2__0");
					put(grammarAccess.getInvariantAccess().getGroup(), "rule__Invariant__Group__0");
					put(grammarAccess.getInvariantAccess().getGroup_4(), "rule__Invariant__Group_4__0");
					put(grammarAccess.getStatemachineAccess().getNameAssignment_1(), "rule__Statemachine__NameAssignment_1");
					put(grammarAccess.getStatemachineAccess().getElaboratesAssignment_2_1(), "rule__Statemachine__ElaboratesAssignment_2_1");
					put(grammarAccess.getStatemachineAccess().getRefinesAssignment_3_1(), "rule__Statemachine__RefinesAssignment_3_1");
					put(grammarAccess.getStatemachineAccess().getNodesAssignment_4_1(), "rule__Statemachine__NodesAssignment_4_1");
					put(grammarAccess.getStatemachineAccess().getNodesAssignment_4_2_1(), "rule__Statemachine__NodesAssignment_4_2_1");
					put(grammarAccess.getStatemachineAccess().getTransitionsAssignment_5_1(), "rule__Statemachine__TransitionsAssignment_5_1");
					put(grammarAccess.getStatemachineAccess().getTransitionsAssignment_5_2_1(), "rule__Statemachine__TransitionsAssignment_5_2_1");
					put(grammarAccess.getTransitionAccess().getExtendedAssignment_1(), "rule__Transition__ExtendedAssignment_1");
					put(grammarAccess.getTransitionAccess().getCommentAssignment_3_1(), "rule__Transition__CommentAssignment_3_1");
					put(grammarAccess.getTransitionAccess().getElaboratesAssignment_4_1(), "rule__Transition__ElaboratesAssignment_4_1");
					put(grammarAccess.getTransitionAccess().getElaboratesAssignment_4_2_1(), "rule__Transition__ElaboratesAssignment_4_2_1");
					put(grammarAccess.getTransitionAccess().getTargetAssignment_5_1(), "rule__Transition__TargetAssignment_5_1");
					put(grammarAccess.getTransitionAccess().getSourceAssignment_6_1(), "rule__Transition__SourceAssignment_6_1");
					put(grammarAccess.getStateAccess().getNameAssignment_2(), "rule__State__NameAssignment_2");
					put(grammarAccess.getStateAccess().getStatemachinesAssignment_3_2(), "rule__State__StatemachinesAssignment_3_2");
					put(grammarAccess.getStateAccess().getStatemachinesAssignment_3_3_1(), "rule__State__StatemachinesAssignment_3_3_1");
					put(grammarAccess.getStateAccess().getInvariantsAssignment_4_2(), "rule__State__InvariantsAssignment_4_2");
					put(grammarAccess.getStateAccess().getInvariantsAssignment_4_3_1(), "rule__State__InvariantsAssignment_4_3_1");
					put(grammarAccess.getInitialAccess().getInternalIdAssignment_2_1(), "rule__Initial__InternalIdAssignment_2_1");
					put(grammarAccess.getFinalAccess().getInternalIdAssignment_2_1(), "rule__Final__InternalIdAssignment_2_1");
					put(grammarAccess.getAnyAccess().getInternalIdAssignment_2_1(), "rule__Any__InternalIdAssignment_2_1");
					put(grammarAccess.getJunctionAccess().getInternalIdAssignment_2_1(), "rule__Junction__InternalIdAssignment_2_1");
					put(grammarAccess.getForkAccess().getInternalIdAssignment_2_1(), "rule__Fork__InternalIdAssignment_2_1");
					put(grammarAccess.getInvariantAccess().getNameAssignment_2(), "rule__Invariant__NameAssignment_2");
					put(grammarAccess.getInvariantAccess().getTheoremAssignment_3(), "rule__Invariant__TheoremAssignment_3");
					put(grammarAccess.getInvariantAccess().getCommentAssignment_4_1(), "rule__Invariant__CommentAssignment_4_1");
					put(grammarAccess.getInvariantAccess().getPredicateAssignment_6(), "rule__Invariant__PredicateAssignment_6");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			ac.soton.uk.iumlb.xtext.ui.contentassist.antlr.internal.InternalDslParser typedParser = (ac.soton.uk.iumlb.xtext.ui.contentassist.antlr.internal.InternalDslParser) parser;
			typedParser.entryRuleStatemachine();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
