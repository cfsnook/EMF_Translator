// automatically generated by Xtext
grammar ac.soton.uk.iumlb.xtext.Dsl with org.eclipse.xtext.common.Terminals

import "http://soton.ac.uk/models/eventb/statemachines/2014" 
import "http://emf.eventb.org/models/core/2014" as core
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://soton.ac.uk/models/eventb/coreextension/2014" as coreextension
import "http://emf.eventb.org/models/core/machine/2014" as machine

Statemachine returns Statemachine:
//	(localGenerated?='localGenerated')?
	'Statemachine'
	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('comment' comment=EString)?
//		('dataKind' dataKind=DataKind)?
//		'extensionId' extensionId=EString
//		('selfName' selfName=EString)?
//		('translation' translation=TranslationKind)?
		('elaborates' elaborates=[core::EventBNamed|EString])?
		('refines' refines=[Statemachine|EString])?
//		('instances' instances=[core::EventBNamedCommentedElement|EString])?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		('nodes' /*'{'*/ nodes+=AbstractNode ( "," nodes+=AbstractNode)* /*'}'*/ )?
		('transitions' /*'{'*/ transitions+=Transition ( "," transitions+=Transition)* /*'}'*/ )?
//	'}'
	;


//AbstractExtension returns core::AbstractExtension:
//	Extension;


//EventBNamed returns core::EventBNamed:
//	Project;

AbstractNode returns AbstractNode:
	State | Initial | Final | Any | Junction | Fork;


//EventBNamedCommentedElement returns core::EventBNamedCommentedElement:
//	Project;


//EventBElement returns core::EventBElement:
//	Project | Extension;



//Annotation returns core::Annotation:
//	{core::Annotation}
//	'Annotation'
//	'{'
//		('source' source=EString)?
//		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('details' '{' details+=StringToStringMapEntry ( "," details+=StringToStringMapEntry)* '}' )?
//		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
//	'}';

//StringToAttributeMapEntry returns core::StringToAttributeMapEntry:
//	'StringToAttributeMapEntry'
//	'{'
//		'key' key=EString
//		('value' value=Attribute)?
//	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EString returns ecore::EString:
	STRING | ID;

//DataKind returns coreextension::DataKind:
//	'DataKind' /* TODO: implement this rule and an appropriate IValueConverter */;

Transition returns Transition:
	{Transition}
//	(localGenerated?='localGenerated')?
	(extended?='extended')?
	'Transition'
//	'{'
//		('internalId' internalId=EString)?
		('comment' comment=EString)?
		('elaborates' /*'('*/ elaborates+=[machine::Event|EString] ( "," elaborates+=[machine::Event|EString])* /*')'*/ )?
		('target' target=[AbstractNode|EString])?
		('source' source=[AbstractNode|EString])?
//		('targetContainer' targetContainer=[core::EventBElement|EString])?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//		('parameters' '{' parameters+=TypedParameter ( "," parameters+=TypedParameter)* '}' )?
//		('guards' '{' guards+=Guard ( "," guards+=Guard)* '}' )?
//		('actions' '{' actions+=Action ( "," actions+=Action)* '}' )?
//		('witnesses' '{' witnesses+=Witness ( "," witnesses+=Witness)* '}' )?
//	'}'
	;

//TranslationKind returns TranslationKind:
//	'TranslationKind' /* TODO: implement this rule and an appropriate IValueConverter */;

//StringToStringMapEntry returns core::StringToStringMapEntry:
//	{core::StringToStringMapEntry}
//	'StringToStringMapEntry'
//	'{'
//		('key' key=EString)?
//		('value' value=EString)?
//	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

//Extension returns core::Extension:
//	(localGenerated?='localGenerated')?
//	'Extension'
//	'{'
//		('internalId' internalId=EString)?
//		'extensionId' extensionId=EString
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}';

//Attribute returns core::Attribute:
//	'Attribute'
//	'{'
//		'type' type=AttributeType
//		'value' value=EJavaObject
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//	'}';

//AttributeType returns core::AttributeType:
//	'AttributeType' /* TODO: implement this rule and an appropriate IValueConverter */;

//EJavaObject returns ecore::EJavaObject:
//	'EJavaObject' /* TODO: implement this rule and an appropriate IValueConverter */;

//Project returns core::Project:
//	{core::Project}
//	(localGenerated?='localGenerated')?
//	'Project'
//	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('comment' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//		('components' '{' components+=EventBNamedCommentedComponentElement ( "," components+=EventBNamedCommentedComponentElement)* '}' )?
//	'}';

State returns State:
	{State}
//	(localGenerated?='localGenerated')?
	'State'
	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
//		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
//		('refines' refines=[State|EString])?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		('statemachines' '{' statemachines+=Statemachine ( "," statemachines+=Statemachine)* '}' )?
		('invariants' '{' invariants+=Invariant ( "," invariants+=Invariant)* '}' )?
//	'}'
	;

Initial returns Initial:
	{Initial}
//	(localGenerated?='localGenerated')?
	'Initial'
//	'{'
		('internalId' internalId=EString)?
//		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
//		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Final returns Final:
	{Final}
//	(localGenerated?='localGenerated')?
	'Final'
//	'{'
		('internalId' internalId=EString)?
//		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
//		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Any returns Any:
	{Any}
//	(localGenerated?='localGenerated')?
	'Any'
//	'{'
		('internalId' internalId=EString)?
//		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
//		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Junction returns Junction:
	{Junction}
//	(localGenerated?='localGenerated')?
	'Junction'
//	'{'
		('internalId' internalId=EString)?
//		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
//		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Fork returns Fork:
	{Fork}
//	(localGenerated?='localGenerated')?
	'Fork'
//	'{'
		('internalId' internalId=EString)?
//		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
//		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Invariant returns machine::Invariant:
//	(localGenerated?='localGenerated')?
	'Invariant'
	'@'name=EString
	(theorem?='theorem')?
//	'{'
//		('internalId' internalId=EString)?
		('comment' comment=EString)?
		'predicate' predicate=EString
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

//Event returns machine::Event:
//	{machine::Event}
//	(localGenerated?='localGenerated')?
//	(extended?='extended')?
//	'Event'
//	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('comment' comment=EString)?
//		('convergence' convergence=Convergence)?
//		('refines' '(' refines+=[machine::Event|EString] ( "," refines+=[machine::Event|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
//		('guards' '{' guards+=Guard ( "," guards+=Guard)* '}' )?
//		('witnesses' '{' witnesses+=Witness ( "," witnesses+=Witness)* '}' )?
//		('actions' '{' actions+=Action ( "," actions+=Action)* '}' )?
//	'}';

//TypedParameter returns coreextension::TypedParameter:
//	(localGenerated?='localGenerated')?
//	'TypedParameter'
//	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('comment' comment=EString)?
//		'type' type=EString
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}';

//Guard returns machine::Guard:
//	(localGenerated?='localGenerated')?
//	theorem?='theorem'
//	'Guard'
//	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('comment' comment=EString)?
//		'predicate' predicate=EString
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}';
//
//Action returns machine::Action:
//	(localGenerated?='localGenerated')?
//	'Action'
//	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('comment' comment=EString)?
//		'action' action=EString
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}';
//
//Witness returns machine::Witness:
//	(localGenerated?='localGenerated')?
//	'Witness'
//	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('comment' comment=EString)?
//		'predicate' predicate=EString
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}';
//
//Convergence returns machine::Convergence:
//	'Convergence' /* TODO: implement this rule and an appropriate IValueConverter */;
//
//Parameter returns machine::Parameter:
//	{machine::Parameter}
//	(localGenerated?='localGenerated')?
//	'Parameter'
//	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('comment' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}';
