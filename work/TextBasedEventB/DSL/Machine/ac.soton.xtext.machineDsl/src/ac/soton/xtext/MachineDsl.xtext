// automatically generated by Xtext
grammar ac.soton.xtext.MachineDsl with org.eclipse.xtext.common.Terminals

import "http://emf.eventb.org/models/core/context/2014" as context
import "http://emf.eventb.org/models/core/2014" as core
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://emf.eventb.org/models/core/machine/2014" 
import "http://soton.ac.uk/models/eventb/statemachines/2014" 
import "http://soton.ac.uk/models/eventb/coreextension/2014" as coreextension


Machine returns Machine:
	{Machine}
//	(localGenerated?='localGenerated')?
	'machine'
	name=EString
//	'{'
//		('internalId' internalId=EString)?
		('>' comment=EString)?
		('refines' /*'('*/ refines+=[Machine|EString] ( /*","*/ refines+=[Machine|EString])* /*')'*/ )?
		('sees' /*'('*/ sees+=[context::Context|EString] ( /*","*/ sees+=[context::Context|EString])* /*')'*/ )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		('variables' /*'{'*/ variables+=Variable ( /*","*/ variables+=Variable)* /*'}'*/ )?
		('invariants' /*'{'*/ invariants+=Invariant ( invariants+=Invariant)* /*'}'*/ )?
		('variant' variant=Variant)?
		('events' /*'{'*/ events+=event ( /*","*/ events+=event)* /*'}'*/ )?
//	'}'
	'end'
;


AbstractExtension returns core::AbstractExtension:
	Extension;


//Annotation returns core::Annotation:
//	{core::Annotation}
//	'Annotation'
//	'{'
//		('source' source=EString)?
//		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('details' '{' details+=StringToStringMapEntry ( "," details+=StringToStringMapEntry)* '}' )?
//		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
//	'}';

//StringToAttributeMapEntry returns core::StringToAttributeMapEntry:
//	'StringToAttributeMapEntry'
//	'{'
//		'key' key=EString
//		('value' value=Attribute)?
//	'}';

//EBoolean returns ecore::EBoolean:
//	'true' | 'false';

EString returns ecore::EString:
	STRING | ID;

//Context returns context::Context:
//	{context::Context}
//	(localGenerated?='localGenerated')?
//	'Context'
//	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('>' comment=EString)?
//		('extends' '(' extends+=[context::Context|EString] ( "," extends+=[context::Context|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//		('sets' '{' sets+=CarrierSet ( "," sets+=CarrierSet)* '}' )?
//		('constants' '{' constants+=Constant ( "," constants+=Constant)* '}' )?
//		('axioms' '{' axioms+=Axiom ( "," axioms+=Axiom)* '}' )?
//	'}';

Variable returns Variable:
	{Variable}
//	(localGenerated?='localGenerated')?
//	'Variable'
	name=EString
//	'{'
//		('internalId' internalId=EString)?
		('>' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Invariant returns Invariant:
//	(localGenerated?='localGenerated')?
//	'Invariant'
	'@'name=EString
//	'{'
//		('internalId' internalId=EString)?
//		'is' 
		predicate=EString?
		(theorem?='theorem')?
		('>' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Variant returns Variant:
	{Variant}
//	(localGenerated?='localGenerated')?
	'Variant'
//	'{'
//		('internalId' internalId=EString)?
		'expression' expression=EString?
		('>' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

event returns Event:
	{Event}
//	(localGenerated?='localGenerated')?
	'event'
	name=EString
	(extended?='extended')?
//	'{'
//		('internalId' internalId=EString)?
		(/*'convergence'*/ convergence=Convergence)?
		('>' comment=EString)?		
		('refines' /*'('*/ refines+=[Event|QString] ( /*","*/ refines+=[Event|EString])* /*')'*/ )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		
		('when' /*'{'*/ guards+=Guard ( /*","*/ guards+=Guard)* /*'}'*/ )?

		('any' /*'{'*/ parameters+=Parameter ( /*","*/ parameters+=Parameter)* /*'}'*/ 
		 'where' /*'{'*/ guards+=Guard ( /*","*/ guards+=Guard)* /*'}'*/ )?
		
		
		('with' /*'{'*/ witnesses+=Witness ( /*","*/ witnesses+=Witness)* /*'}'*/ )?
		('then' /*'{'*/ actions+=Action ( /*","*/ actions+=Action)* /*'}'*/ )?
//	'}'
	'end'
	;

QString returns ecore::EString:
	STRING | ID ('\u00b7' ID)* ;


//StringToStringMapEntry returns core::StringToStringMapEntry:
//	{core::StringToStringMapEntry}
//	'StringToStringMapEntry'
//	'{'
//		('key' key=EString)?
//		('value' value=EString)?
//	'}';

//EObject returns ecore::EObject:
//	{ecore::EObject}
//	'EObject'
//	;

Extension returns core::Extension:
	{core::Extension}
//	(localGenerated?='localGenerated')?
//	'Extension'
//	'{'
//		('internalId' internalId=EString)?
//		'extensionId' extensionId=EString
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

//Attribute returns core::Attribute:
//	'Attribute'
//	'{'
//		'type' type=AttributeType
//		'value' value=EJavaObject
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//	'}'
//	;

//enum AttributeType returns core::AttributeType:
//				Boolean = 'Boolean' | Handle = 'Handle' | Integer = 'Integer' | Long = 'Long' | String = 'String';

//EJavaObject returns ecore::EJavaObject:
//	'EJavaObject' /* TODO: implement this rule and an appropriate IValueConverter */;

//CarrierSet returns context::CarrierSet:
//	{context::CarrierSet}
//	(localGenerated?='localGenerated')?
//	'carrierSet'
//	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('>' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
//	;

//Constant returns context::Constant:
//	{context::Constant}
//	(localGenerated?='localGenerated')?
//	'constant'
//	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('>' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}';

//Axiom returns context::Axiom:
//	(localGenerated?='localGenerated')?
//	(theorem?='theorem')?
//	'axiom'
//	'@'name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('>' comment=EString)?
//		'predicate' predicate=EString
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
//	;

enum Convergence returns Convergence:
				ordinary = 'ordinary' | convergent = 'convergent' | anticipated = 'anticipated';

Parameter returns Parameter:
	{Parameter}
//	(localGenerated?='localGenerated')?
//	'Parameter'
	name=EString
//	'{'
//		('internalId' internalId=EString)?
		('>' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Guard returns Guard:
//	(localGenerated?='localGenerated')?
//	'Guard'
	'@'name=EString
//	'{'
//		('internalId' internalId=EString)?
		predicate=EString?
		(theorem?='theorem')?
		('>' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Witness returns Witness:
	(localGenerated?='localGenerated')?
//	'witness'
	'@'name=EString
//	'{'
//		('internalId' internalId=EString)?
		/*'predicate'*/ predicate=EString?
		('>' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Action returns Action:
//	(localGenerated?='localGenerated')?
//	'Action'
	'@'name=EString
//	'{'
//		('internalId' internalId=EString)?
//		'then' 
		action=EString?
		('>' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

	Statemachine returns Statemachine:
//	(localGenerated?='localGenerated')?
	'Statemachine'
	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('dataKind' dataKind=DataKind)?
//		'extensionId' extensionId=EString
//		('selfName' selfName=EString)?
		('>' comment=EString)?
		('translation' translation=TranslationKind)?
		('elaborates' elaborates=[core::EventBNamed|EString])?
		('refines' refines=[Statemachine|EString])?
//		('instances' instances=[core::EventBNamedCommentedElement|EString])?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		('nodes' /*'{'*/ nodes+=AbstractNode ( "," nodes+=AbstractNode)* /*'}'*/ )?
		('transitions' /*'{'*/ transitions+=Transition ( /*","*/ transitions+=Transition)* /*'}'*/ )?
//	'}'
	'end'
	;
	
	Transition returns Transition:
	{Transition}
//	(localGenerated?='localGenerated')?
	(extended?='extended')?
	'Transition'
//	'{'
//		('internalId' internalId=EString)?
		('>' comment=EString)?
		('elaborates' /*'('*/ elaborates+=[Event|EString] ( /*","*/ elaborates+=[Event|EString])* /*')'*/ )?
		('target' target=[AbstractNode|EString])?
		('source' source=[AbstractNode|EString])?
//		('targetContainer' targetContainer=[core::EventBElement|EString])?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?

		('when' /*'{'*/ guards+=Guard ( /*","*/ guards+=Guard)* /*'}'*/ )?

		('any' /*'{'*/ parameters+=TypedParameter ( /*","*/ parameters+=TypedParameter)* /*'}'*/ 
		 'where' /*'{'*/ guards+=Guard ( /*","*/ guards+=Guard)* /*'}'*/ )?
		
		('with' /*'{'*/ witnesses+=Witness ( /*","*/ witnesses+=Witness)* /*'}'*/ )?
		('then' /*'{'*/ actions+=Action ( /*","*/ actions+=Action)* /*'}'*/ )?
	'end'
//	'}'
	;
	
	
	enum TranslationKind returns TranslationKind:
				MULTIVAR = 'MULTIVAR' | SINGLEVAR = 'SINGLEVAR' | REFINEDVAR = 'REFINEDVAR';
	
	State returns State:
	{State}
//	(localGenerated?='localGenerated')?
	'State'
	name=EString
//	'{'
//		('internalId' internalId=EString)?
//		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
//		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
		('refines' refines=[State|EString])?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		('statemachines' /*'{'*/ statemachines+=Statemachine ( /*","*/ statemachines+=Statemachine)* 'end' )?
		('invariants' /*'{'*/ invariants+=Invariant ( /*","*/ invariants+=Invariant)* /*'}'*/ )?
//	'}'
	;
	
	Initial returns Initial:
	{Initial}
//	(localGenerated?='localGenerated')?
	'Initial'
//	'{'
		('internalId' internalId=EString)?
//		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
//		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Final returns Final:
	{Final}
//	(localGenerated?='localGenerated')?
	'Final'
//	'{'
		('internalId' internalId=EString)?
//		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
//		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Any returns Any:
	{Any}
//	(localGenerated?='localGenerated')?
	'Any'
//	'{'
		('internalId' internalId=EString)?
//		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
//		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Junction returns Junction:
	{Junction}
//	(localGenerated?='localGenerated')?
	'Junction'
//	'{'
		('internalId' internalId=EString)?
//		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
//		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Fork returns Fork:
	{Fork}
//	(localGenerated?='localGenerated')?
	'Fork'
//	'{'
		('internalId' internalId=EString)?
//		('incoming' '(' incoming+=[Transition|EString] ( "," incoming+=[Transition|EString])* ')' )?
//		('outgoing' '(' outgoing+=[Transition|EString] ( "," outgoing+=[Transition|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;
	
	TypedParameter returns coreextension::TypedParameter:
//	(localGenerated?='localGenerated')?
	'TypedParameter'
	name=EString
//	'{'
//		('internalId' internalId=EString)?
		'type' type=EString
		('>' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
;
	
	AbstractNode returns AbstractNode:
	State | Initial | Final | Any | Junction | Fork;
