// automatically generated by Xtext
grammar ac.soton.xtext.ContextDsl with org.eclipse.xtext.common.Terminals

import "http://emf.eventb.org/models/core/2014" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://emf.eventb.org/models/core/context/2014" as context
import "http://emf.eventb.org/models/core/machine/2014" as machine

Context returns context::Context:
	{context::Context}
//	(localGenerated?='localGenerated')?
	'context'
	name=EString
//	'{'
//		('internalId' internalId=EString)?
		('>' comment=EString)?
		('extends' /*'('*/ extends+=[context::Context|EString] ( /*","*/ extends+=[context::Context|EString])* /*')'*/ )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		('sets' /*'{'*/ sets+=CarrierSet ( /*","*/ sets+=CarrierSet)* /*'}'*/ )?
		('constants' /*'{'*/ constants+=Constant ( /*","*/ constants+=Constant)* /*'}'*/ )?
		('axioms' /*'{'*/ axioms+=Axiom ( /*","*/ axioms+=Axiom)* /*'}'*/ )?
//	'}'
	'end'
	;


//AbstractExtension returns AbstractExtension:
//	Extension;








//Annotation returns Annotation:
//	{Annotation}
//	'Annotation'
//	'{'
//		('source' source=EString)?
//		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('details' '{' details+=StringToStringMapEntry ( "," details+=StringToStringMapEntry)* '}' )?
//		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
//	'}';

//StringToAttributeMapEntry returns StringToAttributeMapEntry:
//	'StringToAttributeMapEntry'
//	'{'
//		'key' key=EString
//		('value' value=Attribute)?
//	'}';

//EBoolean returns ecore::EBoolean:
//	'true' | 'false';

EString returns ecore::EString:
	STRING | ID;

CarrierSet returns context::CarrierSet:
	{context::CarrierSet}
//	(localGenerated?='localGenerated')?
//	'CarrierSet'
	name=EString
//	'{'
//		('internalId' internalId=EString)?
		('//' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Constant returns context::Constant:
	{context::Constant}
//	(localGenerated?='localGenerated')?
//	'Constant'
	name=EString
//	'{'
//		('internalId' internalId=EString)?
		('>' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
	;

Axiom returns context::Axiom:
//	(localGenerated?='localGenerated')?
//	'Axiom'
	'@'name=EString
//	'{'
//		('internalId' internalId=EString)?
		/*'predicate'*/ predicate=EString?
		(theorem?='theorem')?
		('>' comment=EString)?
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}'
;

//StringToStringMapEntry returns StringToStringMapEntry:
//	{StringToStringMapEntry}
//	'StringToStringMapEntry'
//	'{'
//		('key' key=EString)?
//		('value' value=EString)?
//	'}';

//EObject returns ecore::EObject:
//	{ecore::EObject}
//	'EObject'
//	;

//Extension returns Extension:
//	(localGenerated?='localGenerated')?
//	'Extension'
//	'{'
//		('internalId' internalId=EString)?
//		'extensionId' extensionId=EString
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
//	'}';

//Attribute returns Attribute:
//	'Attribute'
//	'{'
//		'type' type=AttributeType
//		'value' value=EJavaObject
//		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
//	'}';

//AttributeType returns AttributeType:
//	'AttributeType' /* TODO: implement this rule and an appropriate IValueConverter */;

//EJavaObject returns ecore::EJavaObject:
//	'EJavaObject' /* TODO: implement this rule and an appropriate IValueConverter */;
