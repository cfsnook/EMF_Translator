/*
* generated by Xtext
*/
package ac.soton.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ContextDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContextAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCommentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCommentEStringParserRuleCall_3_1_0 = (RuleCall)cCommentAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExtendsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cExtendsContextCrossReference_4_1_0 = (CrossReference)cExtendsAssignment_4_1.eContents().get(0);
		private final RuleCall cExtendsContextEStringParserRuleCall_4_1_0_1 = (RuleCall)cExtendsContextCrossReference_4_1_0.eContents().get(1);
		private final Assignment cExtendsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cExtendsContextCrossReference_4_2_0 = (CrossReference)cExtendsAssignment_4_2.eContents().get(0);
		private final RuleCall cExtendsContextEStringParserRuleCall_4_2_0_1 = (RuleCall)cExtendsContextCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSetsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSetsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSetsCarrierSetParserRuleCall_5_1_0 = (RuleCall)cSetsAssignment_5_1.eContents().get(0);
		private final Assignment cSetsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cSetsCarrierSetParserRuleCall_5_2_0 = (RuleCall)cSetsAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cConstantsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConstantsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConstantsConstantParserRuleCall_6_1_0 = (RuleCall)cConstantsAssignment_6_1.eContents().get(0);
		private final Assignment cConstantsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cConstantsConstantParserRuleCall_6_2_0 = (RuleCall)cConstantsAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAxiomsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cAxiomsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAxiomsAxiomParserRuleCall_7_1_0 = (RuleCall)cAxiomsAssignment_7_1.eContents().get(0);
		private final Assignment cAxiomsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cAxiomsAxiomParserRuleCall_7_2_0 = (RuleCall)cAxiomsAssignment_7_2.eContents().get(0);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Context returns context::Context:
		//	{context::Context} //	(localGenerated?='localGenerated')?
		//	"context" name=EString //	'{'
		//	//		('internalId' internalId=EString)?
		//	(">" comment=EString)? ("extends" / *'('* / extends+=[context::Context|EString] / *","* /
		//	extends+=[context::Context|EString]*)? / *')'* / //		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		//	//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		//	//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		//	("sets" / *'{'* / sets+=CarrierSet / *","* / sets+=CarrierSet*)? / *'}'* / ("constants" / *'{'* / constants+=Constant / *","* /
		//	constants+=Constant*)? / *'}'* / ("axioms" / *'{'* / axioms+=Axiom / *","* / axioms+=Axiom*)? / *'}'* / //	'}'
		//	"end";
		public ParserRule getRule() { return rule; }

		//{context::Context} //	(localGenerated?='localGenerated')?
		//"context" name=EString //	'{'
		////		('internalId' internalId=EString)?
		//(">" comment=EString)? ("extends" / *'('* / extends+=[context::Context|EString] / *","* /
		//extends+=[context::Context|EString]*)? / *')'* / //		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		////		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		////		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		//("sets" / *'{'* / sets+=CarrierSet / *","* / sets+=CarrierSet*)? / *'}'* / ("constants" / *'{'* / constants+=Constant / *","* /
		//constants+=Constant*)? / *'}'* / ("axioms" / *'{'* / axioms+=Axiom / *","* / axioms+=Axiom*)? / *'}'* / //	'}'
		//"end"
		public Group getGroup() { return cGroup; }

		//{context::Context}
		public Action getContextAction_0() { return cContextAction_0; }

		////	(localGenerated?='localGenerated')?
		//"context"
		public Keyword getContextKeyword_1() { return cContextKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//(">" comment=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_0() { return cGreaterThanSignKeyword_3_0; }

		//comment=EString
		public Assignment getCommentAssignment_3_1() { return cCommentAssignment_3_1; }

		//EString
		public RuleCall getCommentEStringParserRuleCall_3_1_0() { return cCommentEStringParserRuleCall_3_1_0; }

		//("extends" / *'('* / extends+=[context::Context|EString] / *","* / extends+=[context::Context|EString]*)?
		public Group getGroup_4() { return cGroup_4; }

		//"extends"
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		/// *'('* / extends+=[context::Context|EString]
		public Assignment getExtendsAssignment_4_1() { return cExtendsAssignment_4_1; }

		//[context::Context|EString]
		public CrossReference getExtendsContextCrossReference_4_1_0() { return cExtendsContextCrossReference_4_1_0; }

		//EString
		public RuleCall getExtendsContextEStringParserRuleCall_4_1_0_1() { return cExtendsContextEStringParserRuleCall_4_1_0_1; }

		/// *","* / extends+=[context::Context|EString]*
		public Assignment getExtendsAssignment_4_2() { return cExtendsAssignment_4_2; }

		//[context::Context|EString]
		public CrossReference getExtendsContextCrossReference_4_2_0() { return cExtendsContextCrossReference_4_2_0; }

		//EString
		public RuleCall getExtendsContextEStringParserRuleCall_4_2_0_1() { return cExtendsContextEStringParserRuleCall_4_2_0_1; }

		//("sets" / *'{'* / sets+=CarrierSet / *","* / sets+=CarrierSet*)?
		public Group getGroup_5() { return cGroup_5; }

		//"sets"
		public Keyword getSetsKeyword_5_0() { return cSetsKeyword_5_0; }

		/// *'{'* / sets+=CarrierSet
		public Assignment getSetsAssignment_5_1() { return cSetsAssignment_5_1; }

		//CarrierSet
		public RuleCall getSetsCarrierSetParserRuleCall_5_1_0() { return cSetsCarrierSetParserRuleCall_5_1_0; }

		/// *","* / sets+=CarrierSet*
		public Assignment getSetsAssignment_5_2() { return cSetsAssignment_5_2; }

		//CarrierSet
		public RuleCall getSetsCarrierSetParserRuleCall_5_2_0() { return cSetsCarrierSetParserRuleCall_5_2_0; }

		//("constants" / *'{'* / constants+=Constant / *","* / constants+=Constant*)?
		public Group getGroup_6() { return cGroup_6; }

		//"constants"
		public Keyword getConstantsKeyword_6_0() { return cConstantsKeyword_6_0; }

		/// *'{'* / constants+=Constant
		public Assignment getConstantsAssignment_6_1() { return cConstantsAssignment_6_1; }

		//Constant
		public RuleCall getConstantsConstantParserRuleCall_6_1_0() { return cConstantsConstantParserRuleCall_6_1_0; }

		/// *","* / constants+=Constant*
		public Assignment getConstantsAssignment_6_2() { return cConstantsAssignment_6_2; }

		//Constant
		public RuleCall getConstantsConstantParserRuleCall_6_2_0() { return cConstantsConstantParserRuleCall_6_2_0; }

		//("axioms" / *'{'* / axioms+=Axiom / *","* / axioms+=Axiom*)?
		public Group getGroup_7() { return cGroup_7; }

		//"axioms"
		public Keyword getAxiomsKeyword_7_0() { return cAxiomsKeyword_7_0; }

		/// *'{'* / axioms+=Axiom
		public Assignment getAxiomsAssignment_7_1() { return cAxiomsAssignment_7_1; }

		//Axiom
		public RuleCall getAxiomsAxiomParserRuleCall_7_1_0() { return cAxiomsAxiomParserRuleCall_7_1_0; }

		/// *","* / axioms+=Axiom*
		public Assignment getAxiomsAssignment_7_2() { return cAxiomsAssignment_7_2; }

		//Axiom
		public RuleCall getAxiomsAxiomParserRuleCall_7_2_0() { return cAxiomsAxiomParserRuleCall_7_2_0; }

		////	'}'
		//"end"
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////AbstractExtension returns AbstractExtension:
		////	Extension;
		////Annotation returns Annotation:
		////	{Annotation}
		////	'Annotation'
		////	'{'
		////		('source' source=EString)?
		////		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
		////		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		////		('details' '{' details+=StringToStringMapEntry ( "," details+=StringToStringMapEntry)* '}' )?
		////		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
		////	'}';
		////StringToAttributeMapEntry returns StringToAttributeMapEntry:
		////	'StringToAttributeMapEntry'
		////	'{'
		////		'key' key=EString
		////		('value' value=Attribute)?
		////	'}';
		////EBoolean returns ecore::EBoolean:
		////	'true' | 'false';
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class CarrierSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CarrierSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCarrierSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCommentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCommentEStringParserRuleCall_2_1_0 = (RuleCall)cCommentAssignment_2_1.eContents().get(0);
		
		////		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		////		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		////		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		////	'}'
		//CarrierSet returns context::CarrierSet:
		//	{context::CarrierSet} //	(localGenerated?='localGenerated')?
		//	//	'CarrierSet'
		//	name=EString //	'{'
		//	//		('internalId' internalId=EString)?
		//	("//" comment=EString)?;
		public ParserRule getRule() { return rule; }

		//{context::CarrierSet} //	(localGenerated?='localGenerated')?
		////	'CarrierSet'
		//name=EString //	'{'
		////		('internalId' internalId=EString)?
		//("//" comment=EString)?
		public Group getGroup() { return cGroup; }

		//{context::CarrierSet}
		public Action getCarrierSetAction_0() { return cCarrierSetAction_0; }

		////	(localGenerated?='localGenerated')?
		////	'CarrierSet'
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//("//" comment=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//"//"
		public Keyword getSolidusSolidusKeyword_2_0() { return cSolidusSolidusKeyword_2_0; }

		//comment=EString
		public Assignment getCommentAssignment_2_1() { return cCommentAssignment_2_1; }

		//EString
		public RuleCall getCommentEStringParserRuleCall_2_1_0() { return cCommentEStringParserRuleCall_2_1_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCommentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCommentEStringParserRuleCall_2_1_0 = (RuleCall)cCommentAssignment_2_1.eContents().get(0);
		
		////		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		////		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		////		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		////	'}'
		//Constant returns context::Constant:
		//	{context::Constant} //	(localGenerated?='localGenerated')?
		//	//	'Constant'
		//	name=EString //	'{'
		//	//		('internalId' internalId=EString)?
		//	(">" comment=EString)?;
		public ParserRule getRule() { return rule; }

		//{context::Constant} //	(localGenerated?='localGenerated')?
		////	'Constant'
		//name=EString //	'{'
		////		('internalId' internalId=EString)?
		//(">" comment=EString)?
		public Group getGroup() { return cGroup; }

		//{context::Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }

		////	(localGenerated?='localGenerated')?
		////	'Constant'
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//(">" comment=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_0() { return cGreaterThanSignKeyword_2_0; }

		//comment=EString
		public Assignment getCommentAssignment_2_1() { return cCommentAssignment_2_1; }

		//EString
		public RuleCall getCommentEStringParserRuleCall_2_1_0() { return cCommentEStringParserRuleCall_2_1_0; }
	}

	public class AxiomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Axiom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateEStringParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCommentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCommentEStringParserRuleCall_4_1_0 = (RuleCall)cCommentAssignment_4_1.eContents().get(0);
		
		////		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		////		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		////		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		////	'}'
		////StringToStringMapEntry returns StringToStringMapEntry:
		////	{StringToStringMapEntry}
		////	'StringToStringMapEntry'
		////	'{'
		////		('key' key=EString)?
		////		('value' value=EString)?
		////	'}';
		////EObject returns ecore::EObject:
		////	{ecore::EObject}
		////	'EObject'
		////	;
		////Extension returns Extension:
		////	(localGenerated?='localGenerated')?
		////	'Extension'
		////	'{'
		////		('internalId' internalId=EString)?
		////		'extensionId' extensionId=EString
		////		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		////		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
		////		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
		////	'}';
		////Attribute returns Attribute:
		////	'Attribute'
		////	'{'
		////		'type' type=AttributeType
		////		'value' value=EJavaObject
		////		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		////	'}';
		////AttributeType returns AttributeType:
		////	'AttributeType' / * TODO: implement this rule and an appropriate IValueConverter * /;
		////EJavaObject returns ecore::EJavaObject:
		////	'EJavaObject' / * TODO: implement this rule and an appropriate IValueConverter * /;
		//Axiom returns context::Axiom: //	(localGenerated?='localGenerated')?
		////	'Axiom'
		//	"@" name=EString //	'{'
		//	//		('internalId' internalId=EString)?
		//	/ *'predicate'* / predicate=EString? theorem?="theorem"? (">" comment=EString)?;
		public ParserRule getRule() { return rule; }

		////	(localGenerated?='localGenerated')?
		////	'Axiom'
		//"@" name=EString //	'{'
		////		('internalId' internalId=EString)?
		/// *'predicate'* / predicate=EString? theorem?="theorem"? (">" comment=EString)?
		public Group getGroup() { return cGroup; }

		////	(localGenerated?='localGenerated')?
		////	'Axiom'
		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		////	'{'
		////		('internalId' internalId=EString)?
		/// *'predicate'* / predicate=EString?
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }

		//EString
		public RuleCall getPredicateEStringParserRuleCall_2_0() { return cPredicateEStringParserRuleCall_2_0; }

		//theorem?="theorem"?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }

		//"theorem"
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }

		//(">" comment=EString)?
		public Group getGroup_4() { return cGroup_4; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_0() { return cGreaterThanSignKeyword_4_0; }

		//comment=EString
		public Assignment getCommentAssignment_4_1() { return cCommentAssignment_4_1; }

		//EString
		public RuleCall getCommentEStringParserRuleCall_4_1_0() { return cCommentEStringParserRuleCall_4_1_0; }
	}
	
	
	private ContextElements pContext;
	private EStringElements pEString;
	private CarrierSetElements pCarrierSet;
	private ConstantElements pConstant;
	private AxiomElements pAxiom;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ContextDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.xtext.ContextDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Context returns context::Context:
	//	{context::Context} //	(localGenerated?='localGenerated')?
	//	"context" name=EString //	'{'
	//	//		('internalId' internalId=EString)?
	//	(">" comment=EString)? ("extends" / *'('* / extends+=[context::Context|EString] / *","* /
	//	extends+=[context::Context|EString]*)? / *')'* / //		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	//	//		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
	//	//		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	//	("sets" / *'{'* / sets+=CarrierSet / *","* / sets+=CarrierSet*)? / *'}'* / ("constants" / *'{'* / constants+=Constant / *","* /
	//	constants+=Constant*)? / *'}'* / ("axioms" / *'{'* / axioms+=Axiom / *","* / axioms+=Axiom*)? / *'}'* / //	'}'
	//	"end";
	public ContextElements getContextAccess() {
		return (pContext != null) ? pContext : (pContext = new ContextElements());
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}

	////AbstractExtension returns AbstractExtension:
	////	Extension;
	////Annotation returns Annotation:
	////	{Annotation}
	////	'Annotation'
	////	'{'
	////		('source' source=EString)?
	////		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
	////		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	////		('details' '{' details+=StringToStringMapEntry ( "," details+=StringToStringMapEntry)* '}' )?
	////		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
	////	'}';
	////StringToAttributeMapEntry returns StringToAttributeMapEntry:
	////	'StringToAttributeMapEntry'
	////	'{'
	////		'key' key=EString
	////		('value' value=Attribute)?
	////	'}';
	////EBoolean returns ecore::EBoolean:
	////	'true' | 'false';
	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	////		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	////		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
	////		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	////	'}'
	//CarrierSet returns context::CarrierSet:
	//	{context::CarrierSet} //	(localGenerated?='localGenerated')?
	//	//	'CarrierSet'
	//	name=EString //	'{'
	//	//		('internalId' internalId=EString)?
	//	("//" comment=EString)?;
	public CarrierSetElements getCarrierSetAccess() {
		return (pCarrierSet != null) ? pCarrierSet : (pCarrierSet = new CarrierSetElements());
	}
	
	public ParserRule getCarrierSetRule() {
		return getCarrierSetAccess().getRule();
	}

	////		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	////		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
	////		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	////	'}'
	//Constant returns context::Constant:
	//	{context::Constant} //	(localGenerated?='localGenerated')?
	//	//	'Constant'
	//	name=EString //	'{'
	//	//		('internalId' internalId=EString)?
	//	(">" comment=EString)?;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	////		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	////		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
	////		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	////	'}'
	////StringToStringMapEntry returns StringToStringMapEntry:
	////	{StringToStringMapEntry}
	////	'StringToStringMapEntry'
	////	'{'
	////		('key' key=EString)?
	////		('value' value=EString)?
	////	'}';
	////EObject returns ecore::EObject:
	////	{ecore::EObject}
	////	'EObject'
	////	;
	////Extension returns Extension:
	////	(localGenerated?='localGenerated')?
	////	'Extension'
	////	'{'
	////		('internalId' internalId=EString)?
	////		'extensionId' extensionId=EString
	////		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	////		('extensions' '{' extensions+=AbstractExtension ( "," extensions+=AbstractExtension)* '}' )?
	////		('attributes' '{' attributes+=StringToAttributeMapEntry ( "," attributes+=StringToAttributeMapEntry)* '}' )?
	////	'}';
	////Attribute returns Attribute:
	////	'Attribute'
	////	'{'
	////		'type' type=AttributeType
	////		'value' value=EJavaObject
	////		('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	////	'}';
	////AttributeType returns AttributeType:
	////	'AttributeType' / * TODO: implement this rule and an appropriate IValueConverter * /;
	////EJavaObject returns ecore::EJavaObject:
	////	'EJavaObject' / * TODO: implement this rule and an appropriate IValueConverter * /;
	//Axiom returns context::Axiom: //	(localGenerated?='localGenerated')?
	////	'Axiom'
	//	"@" name=EString //	'{'
	//	//		('internalId' internalId=EString)?
	//	/ *'predicate'* / predicate=EString? theorem?="theorem"? (">" comment=EString)?;
	public AxiomElements getAxiomAccess() {
		return (pAxiom != null) ? pAxiom : (pAxiom = new AxiomElements());
	}
	
	public ParserRule getAxiomRule() {
		return getAxiomAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
