/*
* generated by Xtext
*/
grammar InternalContextDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package ac.soton.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ac.soton.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ac.soton.xtext.services.ContextDslGrammarAccess;

}

@parser::members {

 	private ContextDslGrammarAccess grammarAccess;
 	
    public InternalContextDslParser(TokenStream input, ContextDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Context";	
   	}
   	
   	@Override
   	protected ContextDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleContext
entryRuleContext returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContextRule()); }
	 iv_ruleContext=ruleContext 
	 { $current=$iv_ruleContext.current; } 
	 EOF 
;

// Rule Context
ruleContext returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getContextAccess().getContextAction_0(),
            $current);
    }
)	otherlv_1='context' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContextAccess().getContextKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getContextAccess().getGreaterThanSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getCommentEStringParserRuleCall_3_1_0()); 
	    }
		lv_comment_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='extends' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getContextAccess().getExtendsKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContextRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getExtendsContextCrossReference_4_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContextRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getExtendsContextCrossReference_4_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_8='sets' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getContextAccess().getSetsKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getSetsCarrierSetParserRuleCall_5_1_0()); 
	    }
		lv_sets_9_0=ruleCarrierSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"sets",
        		lv_sets_9_0, 
        		"CarrierSet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getSetsCarrierSetParserRuleCall_5_2_0()); 
	    }
		lv_sets_10_0=ruleCarrierSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"sets",
        		lv_sets_10_0, 
        		"CarrierSet");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_11='constants' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getContextAccess().getConstantsKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getConstantsConstantParserRuleCall_6_1_0()); 
	    }
		lv_constants_12_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_12_0, 
        		"Constant");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getConstantsConstantParserRuleCall_6_2_0()); 
	    }
		lv_constants_13_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_13_0, 
        		"Constant");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_14='axioms' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getContextAccess().getAxiomsKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getAxiomsAxiomParserRuleCall_7_1_0()); 
	    }
		lv_axioms_15_0=ruleAxiom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"axioms",
        		lv_axioms_15_0, 
        		"Axiom");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getAxiomsAxiomParserRuleCall_7_2_0()); 
	    }
		lv_axioms_16_0=ruleAxiom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"axioms",
        		lv_axioms_16_0, 
        		"Axiom");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_17='end' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getContextAccess().getEndKeyword_8());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleCarrierSet
entryRuleCarrierSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCarrierSetRule()); }
	 iv_ruleCarrierSet=ruleCarrierSet 
	 { $current=$iv_ruleCarrierSet.current; } 
	 EOF 
;

// Rule CarrierSet
ruleCarrierSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getCarrierSetAccess().getCarrierSetAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCarrierSetAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCarrierSetRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='//' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCarrierSetAccess().getSolidusSolidusKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCarrierSetAccess().getCommentEStringParserRuleCall_2_1_0()); 
	    }
		lv_comment_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCarrierSetRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstantAccess().getConstantAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantAccess().getGreaterThanSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getCommentEStringParserRuleCall_2_1_0()); 
	    }
		lv_comment_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAxiom
entryRuleAxiom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAxiomRule()); }
	 iv_ruleAxiom=ruleAxiom 
	 { $current=$iv_ruleAxiom.current; } 
	 EOF 
;

// Rule Axiom
ruleAxiom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAxiomAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAxiomAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAxiomRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAxiomAccess().getPredicateEStringParserRuleCall_2_0()); 
	    }
		lv_predicate_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAxiomRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_theorem_3_0=	'theorem' 
    {
        newLeafNode(lv_theorem_3_0, grammarAccess.getAxiomAccess().getTheoremTheoremKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAxiomRule());
	        }
       		setWithLastConsumed($current, "theorem", true, "theorem");
	    }

)
)?(	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAxiomAccess().getGreaterThanSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAxiomAccess().getCommentEStringParserRuleCall_4_1_0()); 
	    }
		lv_comment_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAxiomRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


